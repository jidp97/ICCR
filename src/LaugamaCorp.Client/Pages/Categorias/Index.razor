@page "/indice-categorias"
@inject HttpClient Http
@inject IJSRuntime JS
@using System.IO
@using CsvHelper
@using System.Text.Json

<style>
    .btn-blazor {
        background-color: #2e0e4e;
        color: white;
    }

    .my-custom-scrollbar {
        position: relative;
        height: 285px;
        overflow: auto;
        scrollbar-color: #e6e6e6 #fdfdfd;
        scrollbar-width: thin;
    }

    .table-wrapper-scroll-y {
        display: block;
    }

    .thead-blazor {
        background-image: linear-gradient(180deg, rgb(5, 39, 103) 0%, #3a0647 70%);
        color: aliceblue;
    }

    .page-item.active .page-link {
        z-index: 1;
        color: #fff;
        background-color: #2e0e4e;
        border-color: #2e0e4e;
    }

    .page-link {
        position: relative;
        display: block;
        padding: .5rem .75rem;
        margin-left: -1px;
        line-height: 1.25;
        color: #2e0e4e;
        background-color: #fff;
        border: 1px solid #dee2e6;
        border-top-color: rgb(222, 226, 230);
        border-right-color: rgb(222, 226, 230);
        border-bottom-color: rgb(222, 226, 230);
        border-left-color: rgb(222, 226, 230);
    }

        .page-link:hover {
            z-index: 2;
            color: #2c0b4d;
            text-decoration: none;
            background-color: #46174173;
            border-color: #dee2e6;
        }
</style>
<h3>Categorias</h3>
<div id="bar"></div>

<div>
    <a class="btn btn-blazor" href="agregar-categoria">Crear categoria</a>
</div>

<div class="form-inline justify-content-end">
    <label class="sr-only" for="nombre-filtro">Filtrar</label>
    <input type="text" class="form-control mb-2 mr-sm-2"
           @onchange="Writting" oninput="(this.dispatchEvent(new CustomEvent('change', {bubbles: true})))" placeholder="Filtrar categoria" />
</div>


<div>
    <ListadoGenerico Listado="categorias">
        <PlantillaNula>
            @*<div class="caja"></div>*@
        </PlantillaNula>
        <PlantillaVacia>
            <text>No existen categorias actualmente</text>
        </PlantillaVacia>
        <PlantillaConElementos>
            <div class="table-wrapper-scroll-y my-custom-scrollbar">
                <table class="table">
                    <thead class="thead-blazor">
                        <tr>
                            <th>ID</th>
                            <th>Nombre</th>
                           
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var categoria in categorias)
                        {
                            <tr>

                                <td>@categoria.Id</td>
                                <td>
                                    @categoria.Nombre
                                </td>
                               
                                <td>
                                    <a class="btn btn-success" href="editar-categoria/@categoria.Id">Editar</a>
                                    <AuthorizeView Policy="@Policies.IsAdmin">
                                        <button class="btn btn-danger" @onclick="(() => BorrarCategoria(categoria.Id))">Borrar</button>
                                    </AuthorizeView>


                                </td>

                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            @*<button class="btn btn-success" @onclick="ExportarCSV">Exportar a CSV</button>*@
        </PlantillaConElementos>
    </ListadoGenerico>
</div>
<Pagination PaginasTotales="paginasTotales" PaginaActual="paginaActual" PaginaSeleccionada="PaginaSeleccionada"></Pagination>

@code {
    List<Categoria> categorias { get; set; }
    // Estado estados;

    private int paginaActual = 1;
    private int paginasTotales;
    private string nombreCategoriaFiltro = string.Empty;

    protected override async Task OnInitializedAsync()
    {

        await CargarCategorias();

    }


    private async Task PaginaSeleccionada(int pagina)
    {
        paginaActual = pagina;
        await CargarCategorias(pagina);
    }

    async Task Writting(ChangeEventArgs args)
    {
        string values = args.Value.ToString();
        nombreCategoriaFiltro = values;
        await CargarCategorias();
    }



    async Task CargarCategorias(int pagina = 1, int cantidadRegistrosAMostrar = 10)
    {

        if (categorias == null)
        {
            await JS.CargarAsync();
        }

        var httpResponse = await Http.GetAsync($"categorias?Pagina={pagina}&CantidadAMostrar={cantidadRegistrosAMostrar}&nombre={nombreCategoriaFiltro}");
        if (httpResponse.IsSuccessStatusCode)
        {
            paginasTotales = int.Parse(httpResponse.Headers.GetValues("totalPaginas").FirstOrDefault());
            var responseString = await httpResponse.Content.ReadAsStringAsync();
            categorias = JsonSerializer.Deserialize<List<Categoria>>(responseString,
                new JsonSerializerOptions() { PropertyNameCaseInsensitive = true });

        }
        else
        {
            Console.WriteLine("error");
        }
        //personas = await Http.GetJsonAsync<List<Persona>>("personas");
        if (categorias.Count >= 0)
        {
            await JS.RemoveAsync();
        }
        if (categorias.Count <= 0)
        {
            await JS.EmptyDbNotifyAsync();
        }

    }

    async Task BorrarCategoria(int idCategoria)
    {

        var categoriaSeleccionada = categorias.First(x => x.Id == idCategoria);
        string mensajeConfirmacion = $"Realmente deseas borrar a {categoriaSeleccionada.Nombre}?";
        if (await JS.ConfirmAsync("Confirmar", mensajeConfirmacion, TipoMensajeSweetAlert.question))
        {
            await Http.DeleteAsync($"categorias/{idCategoria}");
            await CargarCategorias();
        }

    }
 
}
