@page "/register"
@inject IAuthService AuthService
@inject NavigationManager UriHelper

<h1>Registro de nuevo usuario</h1>

@if (ShowErrors)
{
    <div class="alert alert-danger" role="alert">
        @foreach (var error in Errors)
        {
            <p>error</p>
        }
    </div>
}

<div class="card">
    <div class="card-body">
        <h5 class="card-title">Ingrese los datos del nuevo usuario</h5>
        <EditForm Model="@RegisterModel" OnValidSubmit="@HandleRegistration">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="email">Correo electrónico</label>
                <InputText Id="email" Class="form-control" @bind-Value="@RegisterModel.Email" />
                <ValidationMessage For="@(() => RegisterModel.Email)" />
            </div>
            <div class="form-group">
                <label for="password">Contraseña</label>
                <InputText type="password" Id="password" Class="form-control" @bind-Value="@RegisterModel.Password" />
                <ValidationMessage For="@(() => RegisterModel.Password)" />
            </div>
            <div class="form-group">
                <label for="password">Confirmar contraseña</label>
                <InputText type="password" Id="password" Class="form-control" @bind-Value="@RegisterModel.ConfirmPassword" />
                <ValidationMessage For="@(() => RegisterModel.ConfirmPassword)" />
            </div>
            <button type="submit" class="btn btn-primary">Registrar</button>
        </EditForm>
    </div>
</div>

@code {

    private RegisterModel RegisterModel = new RegisterModel();
    private bool ShowErrors;
    private IEnumerable<string> Errors;

    private async Task HandleRegistration()
    {
        ShowErrors = false;

        var result = await AuthService.Register(RegisterModel);

        if (result.Successful)
        {
            UriHelper.NavigateTo("/usuarios");
        }
        else
        {
            Errors = result.Errors;
            ShowErrors = true;
        }
    }

}